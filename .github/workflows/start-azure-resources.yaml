name: start azure resources

on:
  push:
    branches:
      - main
  # schedule:
  #   - cron: '0 23 * * 0'      # start timing is set as per UTC time zone as based on 08:00 AM JST
  workflow_dispatch:

env:
  VM_TAG_KEY: "autostartstop"
  VM_TAG_VALUE: "yes"
  AKS_TAG_KEY: "autostartstop"
  AKS_TAG_VALUE: "yes"
  ResourceGroup: "FREERG"
  CASSANDRA_MASTER_KEY: "cassandra"
  CASSANDRA_MASTER_VALUE: "master"


jobs:
  Azure_VM_start:
    permissions:
      contents: read
      id-token: write
    if: always()
    runs-on: ubuntu-latest
    outputs: 
      vm_job_satus: ${{ job.status }}
    steps:
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        # creds: ${{ secrets.AZURE_SP_EXPERIMENTS_RG }}

    - name: cassandra script
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          # echo "start Azure VM Mycassandra"
          
          # az vm start -g FREERG -n Mycassandra
          
          az vm list -o table

          echo "checking cassandra status"
          az vm run-command invoke -g FREERG -n Mycassandra --command-id RunShellScript --scripts "/usr/local/cassandra/script.sh" | grep nodetool
          # cat result.txt | grep "nodetool: Failed to connect"
          i=$?
          echo "cassandra status check done"
          echo "status is : $i"

          # if [ "$?" -eq "0" ]; 
          # then 
          #   echo "cluster not started exit the process"; 
          #   exit 1; 
          # else 
          #   echo "Master is running now";  
          # fi         


    # # Run commads to start the azure resources
    # - name: start_azure_vm
    #   run: |
    #     #rgstr=$(az vm list --query "[?tags.${{ env.VM_TAG_KEY }} == '${{ env.VM_TAG_VALUE }}'].{Group:resourceGroup}" -o tsv)
    #     #for vmrg in ${rgstr[@]}; do
    #       #echo "running command with ResourceGroup $vmrg"
    #       vmstr=$(az vm list -g ${{ env.ResourceGroup }} --query "[?tags.${{ env.VM_TAG_KEY }} == '${{ env.VM_TAG_VALUE }}'].{Name:name}" -o tsv)
    #       for vm in ${vmstr[@]}; do
    #         echo "start Azure VM $vm"
    #         az vm start -g ${{ env.ResourceGroup }} -n $vm
    #       done  
    #     #done


        
  # Azure_AKS_start:
  #   permissions:
  #     contents: read
  #     id-token: write
  #   if: always()
  #   runs-on: ubuntu-latest
  #   outputs: 
  #     aks_job_satus: ${{ job.status }}
  #   steps:

  #   # Logs in with your Azure credentials
  #   - name: Azure login
  #     uses: azure/login@v1.4.3
  #     with:
  #       # client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #       # tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #       creds: ${{ secrets.AZURE_SP_EXPERIMENTS_RG }}        

  #   - name: start_azure_aks_cluster
  #     run: |
  #       #krgstr=$(az aks list --query "[?tags.${{ env.AKS_TAG_KEY }} == '${{ env.AKS_TAG_VALUE }}'].{Group:resourceGroup}" -o tsv)
  #       #for krg in ${krgstr[@]}; do
  #         #echo "running command with ResourceGroup $krg"
  #         kclusterstr=$(az aks list -g ${{ env.ResourceGroup }} --query "[?tags.${{ env.AKS_TAG_KEY }} == '${{ env.AKS_TAG_VALUE }}'].{Name:name}" -o tsv)
  #         for kcluster in ${kclusterstr[@]}; do
  #           echo "start Azure AKS $kcluster"
  #           az aks start -g ${{ env.ResourceGroup }} -n $kcluster
  #         done  
  #       #done

  # Slack_Notification:
  #   permissions:
  #     contents: read
  #     id-token: write
  #   needs: [Azure_VM_start, Azure_AKS_start]
  #   if: always()
  #   runs-on: ubuntu-latest
  #   env:
  #     new_line: "\n"
    
  #   steps:
  #   # Logs in with your Azure credentials
  #   - name: Azure login
  #     uses: azure/login@v1.4.3
  #     with:
  #       # client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #       # tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #       # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #       creds: ${{ secrets.AZURE_SP_EXPERIMENTS_RG }}

  #   - name: Resource_Status_Repot
  #     run: |
  #       date > resources.html
  #       az vm list -d --query "[?tags.${{ env.VM_TAG_KEY }} == '${{ env.VM_TAG_VALUE }}'].{VM_Name:name ResourceGroup:resourceGroup PowerState:powerState Location:location PublicIP:publicIps}" -o table >> resources.html
  #       echo " " >> resources.html
  #       echo "=============================================================================================================================" >> resources.html
  #       echo " " >> resources.html
  #       az aks list --query "[?tags.${{ env.AKS_TAG_KEY }} == '${{ env.AKS_TAG_VALUE }}'].{AKS_Name:name ResourceGroup:resourceGroup PowerState:powerState.code Location:location URL:fqdn}" -o table >> resources.html

  #   - name: send slack Slack_Notification
  #     run: |
  #       curl -F file=@resources.html -F "initial_comment=Azure VMs start job status: ${{ needs.Azure_VM_start.outputs.vm_job_satus }} ${{ env.new_line }}Azure AKS start job status: ${{ needs.Azure_AKS_start.outputs.aks_job_satus }}" -F channels=mag-devops-notification -H "Authorization: Bearer ${{ secrets.SLACK_NOTIFICATION }}" https://slack.com/api/files.upload
