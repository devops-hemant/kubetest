name: test

on:
#  schedule:
#    - cron: '*/2 * * * *'      # Start timing is set as per UTC time zone as based on 08:00 AM JST
#    - cron: '30 14 * * 5'     # Stop timing is set as per UTC time zone as based on 08:00 PM IST
  workflow_dispatch:

env:
  VM_TAG_KEY: "auto"
  VM_TAG_VALUE: "yes"
  AKS_TAG_KEY: "foo"
  AKS_TAG_VALUE: "bar"
  ResourceGroup: "RG1"

jobs:
  Azure_VM_Start:
    permissions:
      contents: read
      id-token: write
    if: github.event.schedule != '30 14 * * 5'
    runs-on: ubuntu-latest
    outputs: 
      vm_job_satus: ${{ job.status }}
    steps:
      
    # Run commads to start the azure resources
    - name: start_azure_vm
      run: |
        echo "test"

        
  Azure_AKS_Start:
    permissions:
      contents: read
      id-token: write
    if: github.event.schedule != '30 14 * * 5'
    runs-on: ubuntu-latest
    outputs: 
      aks_job_satus: ${{ job.status }}
    steps:     

    - name: start_azure_aks_cluster
      run: |
        exit 1

  Azure_resources_start_slack_notification:
    permissions:
      contents: read
      id-token: write
    needs: [Azure_VM_Start, Azure_AKS_Start]
    if: |
      github.event.schedule != '*/2 * * * *' && always()

    runs-on: ubuntu-latest
    env:
      new_line: "\n"
    
    steps:
    - name: Resource_Status_Repot
      run: |
        date > resources.html

    - name: send slack Slack_Notification
      run: |
        curl -F file=@resources.html -F "initial_comment=Azuer VMs start job status: ${{ needs.Azure_VM_Start.outputs.vm_job_satus }} ${{ env.new_line }}Azuer AKS start job status: ${{ needs.Azure_AKS_Start.outputs.aks_job_satus }}" -F channels=azure-notifications -H "Authorization: Bearer ${{ secrets.SLACK_ACCESS }}" https://slack.com/api/files.upload
