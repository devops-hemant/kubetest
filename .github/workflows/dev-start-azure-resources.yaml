name: start azure resources

on:
  # push:
  #   branches:
  #     - main
  schedule:
    - cron: '0 23 * * 0'      # start timing is set as per UTC time zone as based on 08:00 AM JST
  workflow_dispatch:

env:
  TAG_KEY: "autostart"
  TAG_VALUE: "yes"
  ResourceGroup: "iam-experiments"

jobs:
  Cassandra_cluster_start:
    permissions:
      contents: read
      id-token: write
    if: always()
    runs-on: ubuntu-latest
    outputs: 
      cassandra_job_satus: ${{ job.status }}
    steps:
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: start_cassandra_master
      run: |      
          l=0
          n=1
          az vm start -g ${{ env.ResourceGroup }} -n cassandra-experimentation
          while  [ "$n" != "0" ] && [ "$l" -le "2" ]
          do
            sleep  20
            az vm run-command invoke -g ${{ env.ResourceGroup }} -n cassandra-experimentation --command-id RunShellScript --scripts "/usr/local/cassandra/bin/nodetool status" -o json | grep -c "State=Normal/Leaving/Joining/Moving" &> /dev/null
            n="$?"
            l=$(( l + 1 ))
          done

          if [[ "$l" -le "2" ]]
          then
            echo "cassandra master is running now"
          else
            echo "cluster not started exit the process"
            exit 1
          fi     
    - name: My backup step
      if: ${{ failure() }}
      run: echo "cassandra master not started"

    - name: start_cassandra_worker1
      run: |      
          l=0
          n=1
          az vm start -g ${{ env.ResourceGroup }} -n cassandra-experimentation-2
          while  [ "$n" != "0" ] && [ "$l" -le "2" ]
          do
            sleep  20
            az vm run-command invoke -g ${{ env.ResourceGroup }} -n cassandra-experimentation-2 --command-id RunShellScript --scripts "/usr/local/cassandra/bin/nodetool status" -o json | grep -c "State=Normal/Leaving/Joining/Moving" &> /dev/null
            n="$?"
            l=$(( l + 1 ))
          done

          if [[ "$l" -le "2" ]]
          then
            echo "cassandra worker-1 is running now"
          else
            echo "cluster not started exit the process"
            exit 1
          fi     
    - name: My backup step
      if: ${{ failure() }}
      run: echo "cassandra worker-1 not started"

    - name: start_cassandra_worker2
      run: |      
          l=0
          n=1
          az vm start -g ${{ env.ResourceGroup }} -n cassandra-experimentation-3
          while  [ "$n" != "0" ] && [ "$l" -le "2" ]
          do
            sleep  20
            az vm run-command invoke -g ${{ env.ResourceGroup }} -n cassandra-experimentation-3 --command-id RunShellScript --scripts "/usr/local/cassandra/bin/nodetool status" -o json | grep -c "State=Normal/Leaving/Joining/Moving" &> /dev/null
            n="$?"
            l=$(( l + 1 ))
          done

          if [[ "$l" -le "2" ]]
          then
            echo "cassandra worker-2 is running now"
          else
            echo "cluster not started exit the process"
            exit 1
          fi     
    - name: My backup step
      if: ${{ failure() }}
      run: echo "cassandra worker-2 not started"

  Azure_VM_start:
    permissions:
      contents: read
      id-token: write
    needs: [Cassandra_cluster_start]
    if: always()
    runs-on: ubuntu-latest
    outputs: 
      vm_job_satus: ${{ job.status }}
    steps:
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Run commads to start the azure resources
    - name: start_azure_vm
      run: |
        #rgstr=$(az vm list --query "[?tags.${{ env.TAG_KEY }} == '${{ env.TAG_VALUE }}'].{Group:resourceGroup}" -o tsv)
        #for vmrg in ${rgstr[@]}; do
          #echo "running command with ResourceGroup $vmrg"
          vmstr=$(az vm list -g ${{ env.ResourceGroup }} --query "[?tags.${{ env.TAG_KEY }} == '${{ env.TAG_VALUE }}'].{Name:name}" -o tsv)
          for vm in ${vmstr[@]}; do
            echo "start Azure VM $vm"
            az vm start -g ${{ env.ResourceGroup }} -n $vm
          done  
        #done

  Azure_AKS_start:
    permissions:
      contents: read
      id-token: write
    if: always()
    runs-on: ubuntu-latest
    outputs: 
      aks_job_satus: ${{ job.status }}
    steps:

    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}        

    - name: start_azure_aks_cluster
      run: |
        #krgstr=$(az aks list --query "[?tags.${{ env.TAG_KEY }} == '${{ env.TAG_VALUE }}'].{Group:resourceGroup}" -o tsv)
        #for krg in ${krgstr[@]}; do
          #echo "running command with ResourceGroup $krg"
          kclusterstr=$(az aks list -g ${{ env.ResourceGroup }} --query "[?tags.${{ env.TAG_KEY }} == '${{ env.TAG_VALUE }}'].{Name:name}" -o tsv)
          for kcluster in ${kclusterstr[@]}; do
            echo "start Azure AKS $kcluster"
            az aks start -g ${{ env.ResourceGroup }} -n $kcluster
          done  
        #done

  Slack_Notification:
    permissions:
      contents: read
      id-token: write
    needs: [Azure_VM_start, Azure_AKS_start]
    if: always()
    runs-on: ubuntu-latest
    env:
      new_line: "\n"
    
    steps:
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Resource_Status_Repot
      run: |
        date > resources.html
        az vm list -d --query "[?tags.${{ env.TAG_KEY }} == '${{ env.TAG_VALUE }}'].{VM_Name:name ResourceGroup:resourceGroup PowerState:powerState Location:location PublicIP:publicIps}" -o table >> resources.html
        echo " " >> resources.html
        echo "=============================================================================================================================" >> resources.html
        echo " " >> resources.html
        az aks list --query "[?tags.${{ env.TAG_KEY }} == '${{ env.TAG_VALUE }}'].{AKS_Name:name ResourceGroup:resourceGroup PowerState:powerState.code Location:location URL:fqdn}" -o table >> resources.html

    # - name: send slack Slack_Notification
    #   run: |
    #     curl -F file=@resources.html -F "initial_comment=Cassandra cluster start job status: ${{ needs.Cassandra_cluster_start.outputs.cassandra_job_satus }} ${{ env.new_line }}Azure VMs start job status: ${{ needs.Azure_VM_start.outputs.vm_job_satus }} ${{ env.new_line }}Azure AKS start job status: ${{ needs.Azure_AKS_start.outputs.aks_job_satus }}" -F channels=mag-devops-notification -H "Authorization: Bearer ${{ secrets.SLACK_NOTIFICATION }}" https://slack.com/api/files.upload


